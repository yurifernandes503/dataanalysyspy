import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import google.generativeai as genai
import os
import json
from datetime import datetime
import warnings
import time
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="DataInsight AI Pro",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Ultra Melhorado
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    .main {
        padding-top: 0rem;
        font-family: 'Inter', sans-serif;
    }
    
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }
    
    .main-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2rem;
        margin: 1rem;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .hero-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        position: relative;
        overflow: hidden;
    }
    
    .hero-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        opacity: 0.3;
    }
    
    .hero-content {
        position: relative;
        z-index: 1;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 10px 25px rgba(240, 147, 251, 0.3);
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(240, 147, 251, 0.4);
    }
    
    .metric-number {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0.5rem 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-label {
        font-size: 1rem;
        font-weight: 500;
        opacity: 0.9;
    }
    
    .insight-box {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        padding: 2rem;
        border-radius: 20px;
        margin: 1rem 0;
        box-shadow: 0 15px 35px rgba(79, 172, 254, 0.3);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .chart-container {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 10px 25px rgba(0,0,0,0.08);
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .status-card {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 20px rgba(168, 237, 234, 0.3);
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }
    
    .stSelectbox > div > div {
        background: white;
        border-radius: 10px;
        border: 2px solid #e1e5e9;
    }
    
    .stTextArea > div > div > textarea {
        background: white;
        border-radius: 10px;
        border: 2px solid #e1e5e9;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
        border-radius: 15px;
        padding: 1rem;
    }
    
    .success-alert {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        color: #155724;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .error-alert {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        color: #721c24;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #dc3545;
        margin: 1rem 0;
    }
    
    .warning-alert {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
    
    .info-alert {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        color: #0c5460;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #17a2b8;
        margin: 1rem 0;
    }
    
    /* Anima√ß√µes */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .fade-in-up {
        animation: fadeInUp 0.6s ease-out;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .pulse {
        animation: pulse 2s infinite;
    }
    
    /* Responsividade */
    @media (max-width: 768px) {
        .hero-header {
            padding: 2rem 1rem;
        }
        .metric-card {
            margin: 0.25rem;
            padding: 1.5rem;
        }
        .metric-number {
            font-size: 2rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Inicializar session state
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
if 'df' not in st.session_state:
    st.session_state.df = None
if 'charts_generated' not in st.session_state:
    st.session_state.charts_generated = False

# Header Ultra Melhorado
st.markdown("""
<div class="hero-header">
    <div class="hero-content">
        <h1 style="font-size: 3.5rem; font-weight: 700; margin-bottom: 1rem; text-shadow: 0 4px 8px rgba(0,0,0,0.2);">
            üöÄ DataInsight AI Pro
        </h1>
        <h3 style="font-size: 1.5rem; font-weight: 400; margin-bottom: 1rem; opacity: 0.9;">
            An√°lise Inteligente de Dados com IA Avan√ßada
        </h3>
        <p style="font-size: 1.1rem; opacity: 0.8; max-width: 600px; margin: 0 auto;">
            Transforme seus dados em insights poderosos com visualiza√ß√µes interativas e an√°lise de IA de √∫ltima gera√ß√£o
        </p>
    </div>
</div>
""", unsafe_allow_html=True)

# Configura√ß√£o do Gemini AI
@st.cache_resource
def configure_gemini():
    """Configura a API do Gemini com cache"""
    try:
        api_key = st.secrets.get("GEMINI_API_KEY") or os.getenv("GEMINI_API_KEY")
        if api_key:
            genai.configure(api_key=api_key)
            return True, "üü¢ Conectado"
        return False, "üî¥ Chave API n√£o encontrada"
    except Exception as e:
        return False, f"üî¥ Erro: {str(e)}"

# Fun√ß√£o para gerar dados de exemplo MELHORADA
@st.cache_data
def generate_sample_data():
    """Gera dados de exemplo mais realistas"""
    np.random.seed(42)
    n_records = 300
    
    # Dados mais realistas
    vendedores = [
        'Jo√£o Silva', 'Maria Santos', 'Pedro Costa', 'Ana Lima', 'Carlos Rocha',
        'Lucia Ferreira', 'Roberto Alves', 'Fernanda Dias', 'Marcos Oliveira',
        'Patricia Souza', 'Ricardo Mendes', 'Juliana Castro', 'Gabriel Torres',
        'Camila Ribeiro', 'Diego Martins', 'Beatriz Gomes'
    ]
    
    produtos = [
        'iPhone 15 Pro', 'MacBook Air M2', 'iPad Pro', 'Apple Watch Ultra',
        'Samsung Galaxy S24', 'Dell XPS 13', 'Surface Pro 9', 'PlayStation 5',
        'Xbox Series X', 'Nintendo Switch', 'AirPods Pro', 'Sony WH-1000XM5',
        'Canon EOS R6', 'GoPro Hero 12', 'Tesla Model Y', 'Drone DJI Mini 4'
    ]
    
    regioes = ['Norte', 'Sul', 'Leste', 'Oeste', 'Centro']
    meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    categorias = ['Eletr√¥nicos', 'Inform√°tica', 'Games', 'Acess√≥rios', 'Automotivo']
    canais = ['Online', 'Loja F√≠sica', 'Marketplace', 'App Mobile', 'Telefone']
    
    data = []
    for i in range(n_records):
        categoria = np.random.choice(categorias)
        
        # Vendas baseadas na categoria
        if categoria == 'Eletr√¥nicos':
            vendas_base = np.random.normal(45000, 15000)
        elif categoria == 'Inform√°tica':
            vendas_base = np.random.normal(35000, 12000)
        elif categoria == 'Games':
            vendas_base = np.random.normal(25000, 8000)
        elif categoria == 'Automotivo':
            vendas_base = np.random.normal(85000, 25000)
        else:
            vendas_base = np.random.normal(15000, 5000)
        
        vendas = max(2000, int(vendas_base))
        custo = int(vendas * np.random.uniform(0.35, 0.65))
        lucro = vendas - custo
        margem = (lucro / vendas) * 100
        
        # Satisfa√ß√£o correlacionada com margem e categoria
        if margem > 45:
            satisfacao = np.random.choice([4, 5], p=[0.2, 0.8])
        elif margem > 30:
            satisfacao = np.random.choice([3, 4, 5], p=[0.1, 0.4, 0.5])
        elif margem > 15:
            satisfacao = np.random.choice([2, 3, 4], p=[0.2, 0.5, 0.3])
        else:
            satisfacao = np.random.choice([1, 2, 3], p=[0.4, 0.4, 0.2])
        
        # Quantidade baseada no pre√ßo
        if vendas > 50000:
            quantidade = np.random.randint(1, 5)
        elif vendas > 20000:
            quantidade = np.random.randint(1, 15)
        else:
            quantidade = np.random.randint(1, 50)
        
        data.append({
            'id': i + 1,
            'vendas': vendas,
            'custo': custo,
            'lucro': lucro,
            'margem': round(margem, 2),
            'regiao': np.random.choice(regioes),
            'produto': np.random.choice(produtos),
            'categoria': categoria,
            'mes': np.random.choice(meses),
            'vendedor': np.random.choice(vendedores),
            'canal': np.random.choice(canais),
            'satisfacao': satisfacao,
            'quantidade': quantidade,
            'desconto': round(np.random.uniform(0, 0.35), 3),
            'tempo_entrega': np.random.randint(1, 21),
            'avaliacao': round(np.random.uniform(1, 5), 1),
            'idade_cliente': np.random.randint(18, 70),
            'genero': np.random.choice(['M', 'F'], p=[0.52, 0.48])
        })
    
    df = pd.DataFrame(data)
    
    # Adicionar colunas calculadas
    df['ticket_medio'] = df['vendas'] / df['quantidade']
    df['roi'] = (df['lucro'] / df['custo']) * 100
    df['score_cliente'] = (df['satisfacao'] * 0.4 + df['avaliacao'] * 0.6).round(1)
    
    return df

# Fun√ß√£o ULTRA MELHORADA para criar gr√°ficos
def create_advanced_charts(df):
    """Cria gr√°ficos avan√ßados e interativos - VERS√ÉO CORRIGIDA"""
    charts = {}
    
    try:
        st.info("üé® Gerando visualiza√ß√µes avan√ßadas...")
        progress_bar = st.progress(0)
        
        # 1. Gr√°fico de Barras 3D - Vendas por Regi√£o
        if 'vendas' in df.columns and 'regiao' in df.columns:
            progress_bar.progress(15)
            vendas_regiao = df.groupby('regiao').agg({
                'vendas': 'sum',
                'lucro': 'sum',
                'quantidade': 'sum'
            }).reset_index()
            
            fig1 = px.bar(
                vendas_regiao,
                x='regiao',
                y='vendas',
                color='lucro',
                title='üìä Vendas e Lucro por Regi√£o',
                text='vendas',
                color_continuous_scale='Viridis',
                hover_data=['lucro', 'quantidade']
            )
            
            fig1.update_traces(
                texttemplate='R$ %{text:,.0f}',
                textposition='outside',
                marker_line_color='white',
                marker_line_width=2
            )
            
            fig1.update_layout(
                height=500,
                title_x=0.5,
                title_font_size=20,
                showlegend=True,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12),
                coloraxis_colorbar=dict(title="Lucro (R$)")
            )
            
            charts['vendas_regiao'] = fig1
            st.success("‚úÖ Gr√°fico 1/8 criado")
        
        # 2. Gr√°fico de Pizza Interativo - Distribui√ß√£o por Categoria
        if 'categoria' in df.columns and 'vendas' in df.columns:
            progress_bar.progress(30)
            categoria_vendas = df.groupby('categoria')['vendas'].sum().reset_index()
            
            fig2 = px.pie(
                categoria_vendas,
                values='vendas',
                names='categoria',
                title='ü•ß Distribui√ß√£o de Vendas por Categoria',
                color_discrete_sequence=px.colors.qualitative.Set3,
                hole=0.4
            )
            
            fig2.update_traces(
                textposition='inside',
                textinfo='percent+label',
                hovertemplate='<b>%{label}</b><br>Vendas: R$ %{value:,.0f}<br>Percentual: %{percent}<extra></extra>',
                pull=[0.1 if i == 0 else 0 for i in range(len(categoria_vendas))]
            )
            
            fig2.update_layout(
                height=500,
                title_x=0.5,
                title_font_size=20,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12)
            )
            
            charts['distribuicao_categoria'] = fig2
            st.success("‚úÖ Gr√°fico 2/8 criado")
        
        # 3. Gr√°fico de Linha M√∫ltipla - Tend√™ncia Temporal
        if 'vendas' in df.columns and 'mes' in df.columns:
            progress_bar.progress(45)
            meses_ordem = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
            
            vendas_mes = df.groupby('mes').agg({
                'vendas': 'sum',
                'lucro': 'sum',
                'quantidade': 'sum'
            }).reindex(meses_ordem, fill_value=0).reset_index()
            
            fig3 = go.Figure()
            
            fig3.add_trace(go.Scatter(
                x=vendas_mes['mes'],
                y=vendas_mes['vendas'],
                mode='lines+markers',
                name='Vendas',
                line=dict(color='#667eea', width=4),
                marker=dict(size=10, symbol='circle'),
                hovertemplate='<b>Vendas</b><br>M√™s: %{x}<br>Valor: R$ %{y:,.0f}<extra></extra>'
            ))
            
            fig3.add_trace(go.Scatter(
                x=vendas_mes['mes'],
                y=vendas_mes['lucro'],
                mode='lines+markers',
                name='Lucro',
                line=dict(color='#f093fb', width=4),
                marker=dict(size=10, symbol='diamond'),
                yaxis='y2',
                hovertemplate='<b>Lucro</b><br>M√™s: %{x}<br>Valor: R$ %{y:,.0f}<extra></extra>'
            ))
            
            fig3.update_layout(
                title='üìà Tend√™ncia de Vendas e Lucro por M√™s',
                xaxis_title='M√™s',
                yaxis_title='Vendas (R$)',
                yaxis2=dict(title='Lucro (R$)', overlaying='y', side='right'),
                height=500,
                title_x=0.5,
                title_font_size=20,
                hovermode='x unified',
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12),
                legend=dict(x=0.02, y=0.98)
            )
            
            charts['tendencia_temporal'] = fig3
            st.success("‚úÖ Gr√°fico 3/8 criado")
        
        # 4. Scatter Plot Avan√ßado - Vendas vs Satisfa√ß√£o
        if 'vendas' in df.columns and 'satisfacao' in df.columns:
            progress_bar.progress(60)
            
            fig4 = px.scatter(
                df,
                x='satisfacao',
                y='vendas',
                color='regiao',
                size='lucro',
                title='üí´ Rela√ß√£o: Vendas √ó Satisfa√ß√£o √ó Regi√£o',
                hover_data=['produto', 'categoria', 'margem'],
                color_discrete_sequence=px.colors.qualitative.Bold,
                size_max=30
            )
            
            fig4.update_traces(
                marker=dict(line=dict(width=1, color='white')),
                hovertemplate='<b>%{hovertext}</b><br>Satisfa√ß√£o: %{x}<br>Vendas: R$ %{y:,.0f}<br>Regi√£o: %{marker.color}<extra></extra>'
            )
            
            fig4.update_layout(
                height=500,
                title_x=0.5,
                title_font_size=20,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12),
                xaxis=dict(title='Satisfa√ß√£o (1-5)', gridcolor='lightgray'),
                yaxis=dict(title='Vendas (R$)', gridcolor='lightgray')
            )
            
            charts['vendas_satisfacao'] = fig4
            st.success("‚úÖ Gr√°fico 4/8 criado")
        
        # 5. Histograma Avan√ßado - Distribui√ß√£o de Vendas
        if 'vendas' in df.columns:
            progress_bar.progress(75)
            
            fig5 = px.histogram(
                df,
                x='vendas',
                nbins=25,
                title='üìä Distribui√ß√£o de Vendas',
                color_discrete_sequence=['#4facfe'],
                marginal='box'
            )
            
            fig5.update_traces(
                marker=dict(line=dict(width=1, color='white')),
                hovertemplate='<b>Faixa de Vendas</b><br>R$ %{x:,.0f}<br>Quantidade: %{y}<extra></extra>'
            )
            
            fig5.update_layout(
                height=500,
                title_x=0.5,
                title_font_size=20,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12),
                xaxis=dict(title='Vendas (R$)', gridcolor='lightgray'),
                yaxis=dict(title='Frequ√™ncia', gridcolor='lightgray')
            )
            
            charts['distribuicao_vendas'] = fig5
            st.success("‚úÖ Gr√°fico 5/8 criado")
        
        # 6. Box Plot Comparativo - Vendas por Produto
        if 'vendas' in df.columns and 'produto' in df.columns:
            progress_bar.progress(85)
            
            # Pegar apenas top 8 produtos para melhor visualiza√ß√£o
            top_produtos = df.groupby('produto')['vendas'].sum().nlargest(8).index
            df_top = df[df['produto'].isin(top_produtos)]
            
            fig6 = px.box(
                df_top,
                x='produto',
                y='vendas',
                color='categoria',
                title='üì¶ Distribui√ß√£o de Vendas por Produto (Top 8)',
                color_discrete_sequence=px.colors.qualitative.Pastel
            )
            
            fig6.update_traces(
                hovertemplate='<b>%{x}</b><br>Vendas: R$ %{y:,.0f}<br>Categoria: %{marker.color}<extra></extra>'
            )
            
            fig6.update_layout(
                height=500,
                title_x=0.5,
                title_font_size=20,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12),
                xaxis=dict(title='Produto', tickangle=45),
                yaxis=dict(title='Vendas (R$)', gridcolor='lightgray')
            )
            
            charts['vendas_produto'] = fig6
            st.success("‚úÖ Gr√°fico 6/8 criado")
        
        # 7. Heatmap de Correla√ß√£o
        if len(df.select_dtypes(include=[np.number]).columns) >= 3:
            progress_bar.progress(95)
            
            numeric_cols = ['vendas', 'lucro', 'margem', 'satisfacao', 'quantidade', 'desconto']
            available_cols = [col for col in numeric_cols if col in df.columns]
            
            if len(available_cols) >= 3:
                corr_matrix = df[available_cols].corr()
                
                fig7 = px.imshow(
                    corr_matrix,
                    title='üî• Matriz de Correla√ß√£o',
                    color_continuous_scale='RdBu',
                    aspect='auto',
                    text_auto=True
                )
                
                fig7.update_layout(
                    height=500,
                    title_x=0.5,
                    title_font_size=20,
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    font=dict(size=12)
                )
                
                charts['correlacao'] = fig7
                st.success("‚úÖ Gr√°fico 7/8 criado")
        
        # 8. Gr√°fico de Funil - Top Vendedores
        if 'vendedor' in df.columns and 'vendas' in df.columns:
            progress_bar.progress(100)
            
            top_vendedores = df.groupby('vendedor')['vendas'].sum().nlargest(10).reset_index()
            
            fig8 = go.Figure(go.Funnel(
                y=top_vendedores['vendedor'],
                x=top_vendedores['vendas'],
                textinfo="value+percent initial",
                hovertemplate='<b>%{y}</b><br>Vendas: R$ %{x:,.0f}<extra></extra>',
                marker=dict(
                    color=px.colors.sequential.Viridis,
                    line=dict(width=2, color='white')
                )
            ))
            
            fig8.update_layout(
                title='üèÜ Top 10 Vendedores',
                height=500,
                title_x=0.5,
                title_font_size=20,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12)
            )
            
            charts['top_vendedores'] = fig8
            st.success("‚úÖ Gr√°fico 8/8 criado")
        
        progress_bar.progress(100)
        time.sleep(0.5)
        progress_bar.empty()
        
        st.success(f"üéâ {len(charts)} gr√°ficos criados com sucesso!")
        return charts
        
    except Exception as e:
        st.error(f"‚ùå Erro ao criar gr√°ficos: {str(e)}")
        st.error(f"Detalhes: {type(e).__name__}")
        return {}

# Fun√ß√£o para an√°lise com Gemini AI MELHORADA
def analyze_with_gemini(df, custom_question=None):
    """Analisa dados com Gemini AI - Vers√£o Melhorada"""
    gemini_status, status_msg = configure_gemini()
    
    if not gemini_status:
        return f"‚ùå Erro na configura√ß√£o: {status_msg}"
    
    try:
        # Preparar estat√≠sticas avan√ßadas
        stats = {
            'total_records': len(df),
            'total_vendas': df['vendas'].sum() if 'vendas' in df.columns else 0,
            'total_lucro': df['lucro'].sum() if 'lucro' in df.columns else 0,
            'margem_media': df['margem'].mean() if 'margem' in df.columns else 0,
            'satisfacao_media': df['satisfacao'].mean() if 'satisfacao' in df.columns else 0,
            'top_regiao': df['regiao'].value_counts().index[0] if 'regiao' in df.columns else 'N/A',
            'top_produto': df['produto'].value_counts().index[0] if 'produto' in df.columns else 'N/A',
            'top_categoria': df['categoria'].value_counts().index[0] if 'categoria' in df.columns else 'N/A'
        }
        
        sample_data = df.head(3).to_dict('records')
        
        if custom_question:
            prompt = f"""
            ü§ñ ANALISTA DE DADOS ESPECIALISTA

            PERGUNTA ESPEC√çFICA: {custom_question}
            
            üìä CONTEXTO DOS DADOS:
            ‚Ä¢ Total de registros: {stats['total_records']:,}
            ‚Ä¢ Vendas totais: R$ {stats['total_vendas']:,.0f}
            ‚Ä¢ Lucro total: R$ {stats['total_lucro']:,.0f}
            ‚Ä¢ Margem m√©dia: {stats['margem_media']:.1f}%
            ‚Ä¢ Satisfa√ß√£o m√©dia: {stats['satisfacao_media']:.1f}/5
            ‚Ä¢ Top regi√£o: {stats['top_regiao']}
            ‚Ä¢ Top produto: {stats['top_produto']}
            ‚Ä¢ Top categoria: {stats['top_categoria']}
            
            üìã AMOSTRA DOS DADOS:
            {json.dumps(sample_data, indent=2, ensure_ascii=False)}
            
            üéØ INSTRU√á√ïES:
            ‚Ä¢ Responda em portugu√™s brasileiro
            ‚Ä¢ Seja espec√≠fico e use dados reais
            ‚Ä¢ Forne√ßa insights acion√°veis
            ‚Ä¢ Use emojis para destacar pontos importantes
            ‚Ä¢ M√°ximo 400 palavras
            """
        else:
            prompt = f"""
            ü§ñ CONSULTOR DE NEG√ìCIOS ESPECIALISTA EM DADOS

            üìä AN√ÅLISE COMPLETA DO DATASET DE VENDAS
            
            üìà M√âTRICAS PRINCIPAIS:
            ‚Ä¢ Total de registros: {stats['total_records']:,}
            ‚Ä¢ Vendas totais: R$ {stats['total_vendas']:,.0f}
            ‚Ä¢ Lucro total: R$ {stats['total_lucro']:,.0f}
            ‚Ä¢ Margem m√©dia: {stats['margem_media']:.1f}%
            ‚Ä¢ Satisfa√ß√£o m√©dia: {stats['satisfacao_media']:.1f}/5
            ‚Ä¢ Regi√£o l√≠der: {stats['top_regiao']}
            ‚Ä¢ Produto l√≠der: {stats['top_produto']}
            ‚Ä¢ Categoria l√≠der: {stats['top_categoria']}
            
            üìã AMOSTRA REPRESENTATIVA:
            {json.dumps(sample_data, indent=2, ensure_ascii=False)}
            
            üéØ FORNE√áA UMA AN√ÅLISE ESTRUTURADA:
            
            1. üìä VIS√ÉO GERAL DO NEG√ìCIO
            ‚Ä¢ Performance geral das vendas
            ‚Ä¢ Principais caracter√≠sticas do dataset
            
            2. üîç INSIGHTS ESTRAT√âGICOS (Top 3)
            ‚Ä¢ Descobertas mais importantes
            ‚Ä¢ Padr√µes identificados nos dados
            
            3. ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
            ‚Ä¢ Problemas ou riscos identificados
            ‚Ä¢ √Åreas que precisam de melhoria
            
            4. üöÄ RECOMENDA√á√ïES PR√ÅTICAS (Top 3)
            ‚Ä¢ A√ß√µes espec√≠ficas para melhorar resultados
            ‚Ä¢ Estrat√©gias baseadas nos dados
            
            5. üìà PR√ìXIMOS PASSOS
            ‚Ä¢ Sugest√µes para an√°lises futuras
            ‚Ä¢ KPIs para monitorar
            
            Use emojis, seja espec√≠fico com n√∫meros reais e forne√ßa insights acion√°veis.
            M√°ximo 600 palavras.
            """
        
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        
        return response.text
        
    except Exception as e:
        return f"‚ùå Erro na an√°lise com IA: {str(e)}\n\nüí° Dica: Verifique sua chave API e conex√£o com a internet."

# Sidebar Ultra Melhorada
with st.sidebar:
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; padding: 1.5rem; border-radius: 15px; text-align: center; margin-bottom: 1rem;">
        <h2 style="margin: 0;">üéõÔ∏è Painel de Controle</h2>
        <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">Central de Comandos</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Status da IA com design melhorado
    st.markdown("### ü§ñ Status da IA")
    gemini_status, status_msg = configure_gemini()
    
    if gemini_status:
        st.markdown(f"""
        <div class="success-alert">
            <strong>{status_msg}</strong><br>
            <small>Google Gemini AI ativo</small>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="error-alert">
            <strong>{status_msg}</strong><br>
            <small>Configure GEMINI_API_KEY</small>
        </div>
        """, unsafe_allow_html=True)
    
    st.divider()
    
    # Upload de arquivo melhorado
    st.markdown("### üìÅ Carregar Dados")
    uploaded_file = st.file_uploader(
        "Escolha um arquivo",
        type=['csv', 'xlsx', 'json'],
        help="üìã Formatos: CSV, Excel, JSON\nüìè Tamanho m√°ximo: 200MB"
    )
    
    # Bot√£o para dados de exemplo melhorado
    if st.button("üé≤ Gerar Dados de Exemplo", type="primary", use_container_width=True):
        with st.spinner("üîÑ Gerando dataset avan√ßado..."):
            st.session_state.df = generate_sample_data()
            st.session_state.data_loaded = True
            st.session_state.charts_generated = False
            st.success("‚úÖ Dataset carregado com sucesso!")
            time.sleep(1)
            st.rerun()
    
    st.divider()
    
    # Informa√ß√µes do dataset
    if st.session_state.data_loaded and st.session_state.df is not None:
        df = st.session_state.df
        
        st.markdown("### üìä Informa√ß√µes do Dataset")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üìã Registros", f"{len(df):,}")
            st.metric("üìä Colunas", len(df.columns))
        
        with col2:
            if 'vendas' in df.columns:
                st.metric("üí∞ Vendas", f"R$ {df['vendas'].sum()/1000:.0f}K")
            if 'lucro' in df.columns:
                st.metric("üìà Lucro", f"R$ {df['lucro'].sum()/1000:.0f}K")
        
        # Tamanho do arquivo
        size_mb = df.memory_usage(deep=True).sum() / 1024**2
        st.info(f"üíæ Tamanho: {size_mb:.2f} MB")
        
        # Qualidade dos dados
        missing_pct = (df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100
        if missing_pct == 0:
            st.success("‚úÖ Dados completos")
        else:
            st.warning(f"‚ö†Ô∏è {missing_pct:.1f}% dados ausentes")

# Processamento do arquivo melhorado
if uploaded_file is not None:
    try:
        with st.spinner("üì§ Processando arquivo..."):
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            elif uploaded_file.name.endswith('.xlsx'):
                df = pd.read_excel(uploaded_file)
            elif uploaded_file.name.endswith('.json'):
                df = pd.read_json(uploaded_file)
            
            st.session_state.df = df
            st.session_state.data_loaded = True
            st.session_state.charts_generated = False
            
            st.success(f"‚úÖ Arquivo '{uploaded_file.name}' carregado com sucesso!")
            st.info(f"üìä {len(df)} registros e {len(df.columns)} colunas carregados")
            time.sleep(1)
            st.rerun()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar arquivo: {str(e)}")
        st.info("üí° Dica: Verifique se o arquivo n√£o est√° corrompido e est√° no formato correto")

# Interface principal ULTRA MELHORADA
if st.session_state.data_loaded and st.session_state.df is not None:
    df = st.session_state.df
    
    # Tabs com √≠cones melhorados
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Dashboard Executivo", 
        "üìà Visualiza√ß√µes Avan√ßadas", 
        "ü§ñ IA Insights Pro", 
        "üîç Explorador de Dados",
        "üì• Centro de Exporta√ß√£o"
    ])
    
    with tab1:
        st.markdown('<div class="fade-in-up">', unsafe_allow_html=True)
        st.markdown("## üìä Dashboard Executivo")
        
        # M√©tricas principais com design ultra melhorado
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">üìã Total de Registros</div>
                <div class="metric-number">{len(df):,}</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">üìä Colunas de Dados</div>
                <div class="metric-number">{len(df.columns)}</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            if 'vendas' in df.columns:
                total_vendas = df['vendas'].sum()
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">üí∞ Vendas Totais</div>
                    <div class="metric-number">R$ {total_vendas/1000000:.1f}M</div>
                </div>
                """, unsafe_allow_html=True)
        
        with col4:
            if 'lucro' in df.columns:
                total_lucro = df['lucro'].sum()
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">üìà Lucro Total</div>
                    <div class="metric-number">R$ {total_lucro/1000000:.1f}M</div>
                </div>
                """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # KPIs adicionais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if 'margem' in df.columns:
                margem_media = df['margem'].mean()
                st.metric("üìä Margem M√©dia", f"{margem_media:.1f}%", 
                         delta=f"{margem_media-30:.1f}%" if margem_media > 30 else None)
        
        with col2:
            if 'satisfacao' in df.columns:
                satisfacao_media = df['satisfacao'].mean()
                st.metric("‚≠ê Satisfa√ß√£o M√©dia", f"{satisfacao_media:.1f}/5",
                         delta=f"{satisfacao_media-4:.1f}" if satisfacao_media > 4 else None)
        
        with col3:
            if 'ticket_medio' in df.columns:
                ticket_medio = df['ticket_medio'].mean()
                st.metric("üé´ Ticket M√©dio", f"R$ {ticket_medio:,.0f}")
        
        with col4:
            if 'roi' in df.columns:
                roi_medio = df['roi'].mean()
                st.metric("üìà ROI M√©dio", f"{roi_medio:.1f}%")
        
        st.markdown("---")
        
        # An√°lise detalhada em colunas
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìà Estat√≠sticas Num√©ricas")
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            if len(numeric_cols) > 0:
                stats_df = df[numeric_cols].describe().round(2)
                st.dataframe(stats_df, use_container_width=True)
            else:
                st.info("‚ÑπÔ∏è Nenhuma coluna num√©rica encontrada")
        
        with col2:
            st.markdown("### üîç Qualidade dos Dados")
            
            missing_values = df.isnull().sum().sum()
            duplicates = df.duplicated().sum()
            memory_usage = df.memory_usage(deep=True).sum() / 1024**2
            
            quality_data = {
                'M√©trica': ['Valores Ausentes', 'Linhas Duplicadas', 'Tamanho (MB)', 'Completude (%)'],
                'Valor': [
                    missing_values,
                    duplicates,
                    f"{memory_usage:.2f}",
                    f"{((len(df) * len(df.columns) - missing_values) / (len(df) * len(df.columns)) * 100):.1f}"
                ],
                'Status': [
                    '‚úÖ' if missing_values == 0 else '‚ö†Ô∏è',
                    '‚úÖ' if duplicates == 0 else '‚ö†Ô∏è',
                    '‚úÖ' if memory_usage < 100 else '‚ö†Ô∏è',
                    '‚úÖ' if missing_values == 0 else '‚ö†Ô∏è'
                ]
            }
            
            quality_df = pd.DataFrame(quality_data)
            st.dataframe(quality_df, hide_index=True, use_container_width=True)
        
        # Top insights r√°pidos
        st.markdown("### üéØ Insights R√°pidos")
        
        insight_col1, insight_col2, insight_col3 = st.columns(3)
        
        with insight_col1:
            if 'regiao' in df.columns and 'vendas' in df.columns:
                top_regiao = df.groupby('regiao')['vendas'].sum().idxmax()
                top_regiao_valor = df.groupby('regiao')['vendas'].sum().max()
                st.info(f"üèÜ **Regi√£o L√≠der**: {top_regiao}\n\nVendas: R$ {top_regiao_valor:,.0f}")
        
        with insight_col2:
            if 'produto' in df.columns and 'vendas' in df.columns:
                top_produto = df.groupby('produto')['vendas'].sum().idxmax()
                top_produto_valor = df.groupby('produto')['vendas'].sum().max()
                st.success(f"ü•á **Produto Top**: {top_produto}\n\nVendas: R$ {top_produto_valor:,.0f}")
        
        with insight_col3:
            if 'vendedor' in df.columns and 'vendas' in df.columns:
                top_vendedor = df.groupby('vendedor')['vendas'].sum().idxmax()
                top_vendedor_valor = df.groupby('vendedor')['vendas'].sum().max()
                st.warning(f"‚≠ê **Vendedor Destaque**: {top_vendedor}\n\nVendas: R$ {top_vendedor_valor:,.0f}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab2:
        st.markdown('<div class="fade-in-up">', unsafe_allow_html=True)
        st.markdown("## üìà Visualiza√ß√µes Avan√ßadas")
        
        # Bot√£o para gerar gr√°ficos
        if not st.session_state.charts_generated:
            if st.button("üé® Gerar Visualiza√ß√µes Avan√ßadas", type="primary", use_container_width=True):
                charts = create_advanced_charts(df)
                st.session_state.charts = charts
                st.session_state.charts_generated = True
                st.rerun()
        else:
            charts = st.session_state.get('charts', {})
        
        if st.session_state.charts_generated and charts:
            st.success(f"üéâ {len(charts)} visualiza√ß√µes criadas com sucesso!")
            
            # Organizar gr√°ficos em grid responsivo
            chart_keys = list(charts.keys())
            
            # Primeira linha - 2 gr√°ficos
            if len(chart_keys) >= 2:
                col1, col2 = st.columns(2)
                with col1:
                    if 'vendas_regiao' in charts:
                        st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                        st.plotly_chart(charts['vendas_regiao'], use_container_width=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    if 'distribuicao_categoria' in charts:
                        st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                        st.plotly_chart(charts['distribuicao_categoria'], use_container_width=True)
                        st.markdown('</div>', unsafe_allow_html=True)
            
            # Segunda linha - 1 gr√°fico grande
            if 'tendencia_temporal' in charts:
                st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                st.plotly_chart(charts['tendencia_temporal'], use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Terceira linha - 2 gr√°ficos
            col1, col2 = st.columns(2)
            with col1:
                if 'vendas_satisfacao' in charts:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(charts['vendas_satisfacao'], use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                if 'distribuicao_vendas' in charts:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(charts['distribuicao_vendas'], use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
            
            # Quarta linha - 2 gr√°ficos
            col1, col2 = st.columns(2)
            with col1:
                if 'vendas_produto' in charts:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(charts['vendas_produto'], use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                if 'correlacao' in charts:
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(charts['correlacao'], use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
            
            # Quinta linha - 1 gr√°fico
            if 'top_vendedores' in charts:
                st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                st.plotly_chart(charts['top_vendedores'], use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Bot√£o para regenerar
            if st.button("üîÑ Regenerar Visualiza√ß√µes", use_container_width=True):
                st.session_state.charts_generated = False
                st.rerun()
        
        else:
            st.info("üé® Clique no bot√£o acima para gerar visualiza√ß√µes interativas avan√ßadas")
            
            # Preview dos tipos de gr√°ficos
            st.markdown("### üìä Tipos de Visualiza√ß√µes Dispon√≠veis:")
            
            preview_col1, preview_col2, preview_col3, preview_col4 = st.columns(4)
            
            with preview_col1:
                st.markdown("""
                **üìä Gr√°fico de Barras**
                - Vendas por regi√£o
                - Compara√ß√£o visual
                - Dados interativos
                """)
            
            with preview_col2:
                st.markdown("""
                **ü•ß Gr√°fico de Pizza**
                - Distribui√ß√£o por categoria
                - Percentuais visuais
                - Hover detalhado
                """)
            
            with preview_col3:
                st.markdown("""
                **üìà Gr√°fico de Linha**
                - Tend√™ncias temporais
                - M√∫ltiplas s√©ries
                - An√°lise de padr√µes
                """)
            
            with preview_col4:
                st.markdown("""
                **üí´ Scatter Plot**
                - Correla√ß√µes
                - M√∫ltiplas dimens√µes
                - Insights visuais
                """)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab3:
        st.markdown('<div class="fade-in-up">', unsafe_allow_html=True)
        st.markdown("## ü§ñ IA Insights Pro")
        
        if gemini_status:
            # Bot√µes de a√ß√£o melhorados
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üöÄ An√°lise Completa", type="primary", use_container_width=True):
                    with st.spinner("ü§ñ Analisando dados com Gemini AI..."):
                        analysis = analyze_with_gemini(df)
                        st.session_state.ai_analysis = analysis
            
            with col2:
                if st.button("üîÑ Testar Conex√£o IA", use_container_width=True):
                    with st.spinner("üß™ Testando conex√£o..."):
                        test_result = analyze_with_gemini(df, "Responda apenas: 'IA funcionando perfeitamente!'")
                        if "funcionando" in test_result.lower():
                            st.success("‚úÖ IA conectada e funcionando!")
                        else:
                            st.error("‚ùå Problema na conex√£o com IA")
            
            with col3:
                if st.button("‚ö° Insights R√°pidos", use_container_width=True):
                    with st.spinner("‚ö° Gerando insights r√°pidos..."):
                        quick_analysis = analyze_with_gemini(df, "D√™ 3 insights r√°pidos e pr√°ticos sobre estes dados")
                        st.session_state.quick_insights = quick_analysis
            
            st.markdown("---")
            
            # Pergunta customizada melhorada
            st.markdown("### üí¨ Consultor IA Personalizado")
            
            # Sugest√µes de perguntas melhoradas
            suggestions = [
                "Quais s√£o as 3 principais oportunidades de crescimento?",
                "Como posso aumentar a margem de lucro em 20%?",
                "Que produtos devo focar para maximizar vendas?",
                "Quais regi√µes t√™m maior potencial inexplorado?",
                "Como melhorar a satisfa√ß√£o do cliente?",
                "Que estrat√©gias de pricing recomendam?",
                "Quais vendedores precisam de treinamento?",
                "Como otimizar o mix de produtos?",
                "Que tend√™ncias sazonais identificam?",
                "Como reduzir custos operacionais?"
            ]
            
            col1, col2 = st.columns([3, 1])
            
            with col1:
                selected_suggestion = st.selectbox(
                    "üí° Perguntas Sugeridas (ou digite a sua):",
                    [""] + suggestions,
                    help="Escolha uma pergunta ou digite sua pr√≥pria pergunta personalizada"
                )
            
            with col2:
                st.markdown("<br>", unsafe_allow_html=True)
                use_suggestion = st.button("üìù Usar Sugest√£o", use_container_width=True)
            
            custom_question = st.text_area(
                "üéØ Sua Pergunta Personalizada:",
                value=selected_suggestion if use_suggestion and selected_suggestion else "",
                placeholder="Ex: Como posso aumentar as vendas na regi√£o Norte em 30%?",
                height=100,
                help="Seja espec√≠fico para obter insights mais precisos"
            )
            
            if st.button("ü§ñ Consultar IA Especialista", use_container_width=True) and custom_question:
                with st.spinner("ü§ñ Processando consulta especializada..."):
                    custom_analysis = analyze_with_gemini(df, custom_question)
                    st.session_state.custom_analysis = custom_analysis
                    st.session_state.last_question = custom_question
            
            st.markdown("---")
            
            # Exibir resultados com design melhorado
            if 'ai_analysis' in st.session_state:
                st.markdown("""
                <div class="insight-box">
                    <h3>üéØ An√°lise Completa do Gemini AI</h3>
                    <p>Insights estrat√©gicos baseados em seus dados</p>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown(st.session_state.ai_analysis)
                
                # Bot√£o para nova an√°lise
                if st.button("üîÑ Nova An√°lise Completa"):
                    del st.session_state.ai_analysis
                    st.rerun()
            
            if 'quick_insights' in st.session_state:
                st.markdown("""
                <div class="insight-box">
                    <h3>‚ö° Insights R√°pidos</h3>
                    <p>Descobertas instant√¢neas dos seus dados</p>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown(st.session_state.quick_insights)
            
            if 'custom_analysis' in st.session_state:
                st.markdown(f"""
                <div class="insight-box">
                    <h3>üí¨ Resposta Especializada</h3>
                    <p><strong>Pergunta:</strong> "{st.session_state.get('last_question', 'Pergunta personalizada')}"</p>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown(st.session_state.custom_analysis)
                
                # Bot√£o para nova pergunta
                if st.button("‚ùì Fazer Nova Pergunta"):
                    del st.session_state.custom_analysis
                    if 'last_question' in st.session_state:
                        del st.session_state.last_question
                    st.rerun()
        
        else:
            st.markdown("""
            <div class="error-alert">
                <h3>‚ùå IA N√£o Configurada</h3>
                <p>Configure a chave API do Google Gemini para usar esta funcionalidade</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("### üîß Como Configurar:")
            st.code("""
# M√©todo 1: Vari√°vel de ambiente
set GEMINI_API_KEY=sua_chave_aqui

# M√©todo 2: Arquivo secrets
# Criar: .streamlit/secrets.toml
GEMINI_API_KEY = "sua_chave_aqui"
            """)
            
            st.info("üîë Obtenha sua chave em: https://makersuite.google.com/app/apikey")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab4:
        st.markdown('<div class="fade-in-up">', unsafe_allow_html=True)
        st.markdown("## üîç Explorador de Dados Avan√ßado")
        
        # Filtros avan√ßados
        st.markdown("### üéõÔ∏è Filtros Inteligentes")
        
        filter_col1, filter_col2, filter_col3 = st.columns(3)
        
        with filter_col1:
            # Filtro categ√≥rico
            categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
            if categorical_cols:
                selected_col = st.selectbox("üìä Filtrar por coluna:", ['Todas'] + categorical_cols)
                if selected_col != 'Todas':
                    unique_values = df[selected_col].unique()
                    selected_values = st.multiselect(
                        f"üéØ Valores de {selected_col}:", 
                        unique_values, 
                        default=unique_values[:5] if len(unique_values) > 5 else unique_values
                    )
                    df_filtered = df[df[selected_col].isin(selected_values)] if selected_values else df
                else:
                    df_filtered = df
            else:
                df_filtered = df
        
    with filter_col2:
        # Filtro num√©rico
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if numeric_cols:
            numeric_col = st.selectbox("üî¢ Filtro num√©rico:", ['Nenhum'] + numeric_cols)
            if numeric_col != 'Nenhum':
                min_val = float(df[numeric_col].min())
                max_val = float(df[numeric_col].max())
                range_vals = st.slider(
                    f"üìè Range de {numeric_col}:",
                    min_val, max_val, (min_val, max_val),
                    help=f"Valores entre {min_val:,.0f} e {max_val:,.0f}"
                )
                df_filtered = df_filtered[
                    (df_filtered[numeric_col] >= range_vals[0]) & 
                    (df_filtered[numeric_col] <= range_vals[1])
                ]
        
        with filter_col3:
            # Configura√ß√µes de exibi√ß√£o
            n_rows = st.slider("üìã Linhas para exibir:", 5, min(100, len(df_filtered)), 20)
            show_stats = st.checkbox("üìä Mostrar estat√≠sticas", True)
            show_charts = st.checkbox("üìà Gr√°ficos r√°pidos", False)
        
        # Estat√≠sticas dos dados filtrados
        if show_stats and len(df_filtered) > 0:
            st.markdown("### üìä Estat√≠sticas dos Dados Filtrados")
            
            stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)
            
            with stat_col1:
                st.metric("üìã Registros Filtrados", f"{len(df_filtered):,}")
            
            with stat_col2:
                if 'vendas' in df_filtered.columns:
                    total_vendas_filtered = df_filtered['vendas'].sum()
                    st.metric("üí∞ Vendas Filtradas", f"R$ {total_vendas_filtered/1000:.0f}K")
            
            with stat_col3:
                if 'lucro' in df_filtered.columns:
                    total_lucro_filtered = df_filtered['lucro'].sum()
                    st.metric("üìà Lucro Filtrado", f"R$ {total_lucro_filtered/1000:.0f}K")
            
            with stat_col4:
                filtro_pct = (len(df_filtered) / len(df)) * 100
                st.metric("üéØ % dos Dados", f"{filtro_pct:.1f}%")
        
        # Gr√°ficos r√°pidos dos dados filtrados
        if show_charts and len(df_filtered) > 0:
            st.markdown("### üìà Visualiza√ß√£o R√°pida dos Dados Filtrados")
            
            chart_col1, chart_col2 = st.columns(2)
            
            with chart_col1:
                if 'vendas' in df_filtered.columns and len(df_filtered) > 1:
                    fig_quick = px.histogram(
                        df_filtered, 
                        x='vendas', 
                        title='Distribui√ß√£o de Vendas (Filtrado)',
                        color_discrete_sequence=['#667eea']
                    )
                    fig_quick.update_layout(height=300)
                    st.plotly_chart(fig_quick, use_container_width=True)
            
            with chart_col2:
                if 'regiao' in df_filtered.columns and 'vendas' in df_filtered.columns:
                    vendas_regiao_filtered = df_filtered.groupby('regiao')['vendas'].sum().reset_index()
                    fig_quick2 = px.bar(
                        vendas_regiao_filtered,
                        x='regiao',
                        y='vendas',
                        title='Vendas por Regi√£o (Filtrado)',
                        color_discrete_sequence=['#f093fb']
                    )
                    fig_quick2.update_layout(height=300)
                    st.plotly_chart(fig_quick2, use_container_width=True)
        
        # Tabela de dados melhorada
        st.markdown(f"### üìä Dados Filtrados ({len(df_filtered):,} de {len(df):,} registros)")
        
        # Busca textual avan√ßada
        search_col1, search_col2 = st.columns([3, 1])
        
        with search_col1:
            search_term = st.text_input(
                "üîé Busca Textual Global:",
                placeholder="Digite qualquer termo para buscar em todas as colunas...",
                help="Busca em todas as colunas de texto"
            )
        
        with search_col2:
            st.markdown("<br>", unsafe_allow_html=True)
            case_sensitive = st.checkbox("üî§ Case Sensitive")
        
        # Aplicar busca se houver termo
        if search_term:
            mask = df_filtered.astype(str).apply(
                lambda x: x.str.contains(search_term, case=case_sensitive, na=False)
            ).any(axis=1)
            df_display = df_filtered[mask]
            st.info(f"üîç Encontrados {len(df_display)} registros com '{search_term}'")
        else:
            df_display = df_filtered
        
        # Exibir tabela com formata√ß√£o melhorada
        if len(df_display) > 0:
            st.dataframe(
                df_display.head(n_rows),
                use_container_width=True,
                height=400
            )
            
            # Informa√ß√µes adicionais
            if len(df_display) > n_rows:
                st.info(f"‚ÑπÔ∏è Mostrando {n_rows} de {len(df_display)} registros. Ajuste o slider para ver mais.")
        else:
            st.warning("‚ö†Ô∏è Nenhum registro encontrado com os filtros aplicados")
        
        # An√°lise r√°pida dos dados filtrados
        if len(df_display) > 0:
            st.markdown("### üéØ An√°lise R√°pida")
            
            analysis_col1, analysis_col2 = st.columns(2)
            
            with analysis_col1:
                st.markdown("**üìä Resumo Estat√≠stico:**")
                numeric_cols_display = df_display.select_dtypes(include=[np.number]).columns
                if len(numeric_cols_display) > 0:
                    summary_stats = df_display[numeric_cols_display].describe().round(2)
                    st.dataframe(summary_stats.T[['mean', 'std', 'min', 'max']], use_container_width=True)
            
            with analysis_col2:
                st.markdown("**üìã Informa√ß√µes Categ√≥ricas:**")
                categorical_cols_display = df_display.select_dtypes(include=['object']).columns
                if len(categorical_cols_display) > 0:
                    for col in categorical_cols_display[:3]:  # Mostrar apenas 3 primeiras
                        unique_count = df_display[col].nunique()
                        most_common = df_display[col].mode().iloc[0] if len(df_display[col].mode()) > 0 else "N/A"
                        st.write(f"**{col}:** {unique_count} valores √∫nicos, mais comum: {most_common}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with tab5:
        st.markdown('<div class="fade-in-up">', unsafe_allow_html=True)
        st.markdown("## üì• Centro de Exporta√ß√£o")
        
        # Op√ß√µes de exporta√ß√£o melhoradas
        export_col1, export_col2 = st.columns(2)
        
        with export_col1:
            st.markdown("### üìä Exportar Dados Processados")
            
            # Preparar dados para download
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            # Seletor de dados para exportar
            export_option = st.radio(
                "üìã Dados para exportar:",
                ["Todos os dados", "Dados filtrados", "Apenas dados num√©ricos", "Resumo estat√≠stico"]
            )
            
            if export_option == "Todos os dados":
                export_df = df
            elif export_option == "Dados filtrados" and 'df_filtered' in locals():
                export_df = df_filtered
            elif export_option == "Apenas dados num√©ricos":
                numeric_cols = df.select_dtypes(include=[np.number]).columns
                export_df = df[numeric_cols]
            else:  # Resumo estat√≠stico
                numeric_cols = df.select_dtypes(include=[np.number]).columns
                export_df = df[numeric_cols].describe()
            
            st.info(f"üìä Preparando {len(export_df)} registros para exporta√ß√£o")
            
            # Bot√µes de download melhorados
            col1, col2, col3 = st.columns(3)
            
            with col1:
                csv_data = export_df.to_csv(index=False)
                st.download_button(
                    label="üìÑ Download CSV",
                    data=csv_data,
                    file_name=f"datainsight_dados_{timestamp}.csv",
                    mime="text/csv",
                    use_container_width=True,
                    help="Formato universal, compat√≠vel com Excel e outras ferramentas"
                )
            
            with col2:
                # Excel com m√∫ltiplas abas
                from io import BytesIO
                buffer = BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    export_df.to_excel(writer, sheet_name='Dados', index=False)
                    
                    # Adicionar aba com estat√≠sticas se houver dados num√©ricos
                    numeric_cols = export_df.select_dtypes(include=[np.number]).columns
                    if len(numeric_cols) > 0:
                        export_df[numeric_cols].describe().to_excel(writer, sheet_name='Estat√≠sticas')
                    
                    # Adicionar aba com an√°lise da IA se existir
                    if 'ai_analysis' in st.session_state:
                        analysis_df = pd.DataFrame({
                            'An√°lise_IA': [st.session_state.ai_analysis]
                        })
                        analysis_df.to_excel(writer, sheet_name='An√°lise_IA', index=False)
                
                st.download_button(
                    label="üìä Download Excel",
                    data=buffer.getvalue(),
                    file_name=f"datainsight_relatorio_{timestamp}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                    help="Relat√≥rio completo com m√∫ltiplas abas"
                )
            
            with col3:
                json_data = export_df.to_json(orient='records', indent=2)
                st.download_button(
                    label="üìã Download JSON",
                    data=json_data,
                    file_name=f"datainsight_dados_{timestamp}.json",
                    mime="application/json",
                    use_container_width=True,
                    help="Formato para APIs e desenvolvimento"
                )
        
        with export_col2:
            st.markdown("### üìà Relat√≥rios Especializados")
            
            # Relat√≥rio executivo
            if st.button("üìä Gerar Relat√≥rio Executivo", use_container_width=True):
                executive_report = f"""
RELAT√ìRIO EXECUTIVO - DATAINSIGHT AI PRO
========================================
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Dataset: {len(df)} registros, {len(df.columns)} colunas

RESUMO EXECUTIVO:
================
‚Ä¢ Total de Registros: {len(df):,}
‚Ä¢ Total de Colunas: {len(df.columns)}
"""
                
                if 'vendas' in df.columns:
                    total_vendas = df['vendas'].sum()
                    executive_report += f"‚Ä¢ Vendas Totais: R$ {total_vendas:,.2f}\n"
                
                if 'lucro' in df.columns:
                    total_lucro = df['lucro'].sum()
                    margem_total = (total_lucro / total_vendas * 100) if 'vendas' in df.columns else 0
                    executive_report += f"‚Ä¢ Lucro Total: R$ {total_lucro:,.2f}\n"
                    executive_report += f"‚Ä¢ Margem Total: {margem_total:.1f}%\n"
                
                if 'satisfacao' in df.columns:
                    satisfacao_media = df['satisfacao'].mean()
                    executive_report += f"‚Ä¢ Satisfa√ß√£o M√©dia: {satisfacao_media:.1f}/5\n"
                
                executive_report += f"""

TOP PERFORMERS:
==============
"""
                
                if 'regiao' in df.columns and 'vendas' in df.columns:
                    top_regiao = df.groupby('regiao')['vendas'].sum().idxmax()
                    top_regiao_valor = df.groupby('regiao')['vendas'].sum().max()
                    executive_report += f"‚Ä¢ Regi√£o L√≠der: {top_regiao} (R$ {top_regiao_valor:,.0f})\n"
                
                if 'produto' in df.columns and 'vendas' in df.columns:
                    top_produto = df.groupby('produto')['vendas'].sum().idxmax()
                    top_produto_valor = df.groupby('produto')['vendas'].sum().max()
                    executive_report += f"‚Ä¢ Produto Top: {top_produto} (R$ {top_produto_valor:,.0f})\n"
                
                if 'ai_analysis' in st.session_state:
                    executive_report += f"""

AN√ÅLISE DA IA:
=============
{st.session_state.ai_analysis}
"""
                
                executive_report += f"""

ESTAT√çSTICAS DETALHADAS:
=======================
{df.describe().to_string()}

---
Relat√≥rio gerado automaticamente pelo DataInsight AI Pro
"""
                
                st.download_button(
                    label="üìÑ Download Relat√≥rio Executivo",
                    data=executive_report,
                    file_name=f"relatorio_executivo_{timestamp}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            
            # Relat√≥rio t√©cnico
            if st.button("üîß Gerar Relat√≥rio T√©cnico", use_container_width=True):
                technical_report = f"""
RELAT√ìRIO T√âCNICO - DATAINSIGHT AI PRO
======================================
Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

INFORMA√á√ïES DO DATASET:
======================
‚Ä¢ Nome: Dataset de An√°lise
‚Ä¢ Registros: {len(df):,}
‚Ä¢ Colunas: {len(df.columns)}
‚Ä¢ Tamanho em Mem√≥ria: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB
‚Ä¢ Tipos de Dados: {dict(df.dtypes.value_counts())}

QUALIDADE DOS DADOS:
===================
‚Ä¢ Valores Ausentes: {df.isnull().sum().sum()}
‚Ä¢ Linhas Duplicadas: {df.duplicated().sum()}
‚Ä¢ Completude: {((len(df) * len(df.columns) - df.isnull().sum().sum()) / (len(df) * len(df.columns)) * 100):.1f}%

AN√ÅLISE POR COLUNA:
==================
"""
                
                for col in df.columns:
                    technical_report += f"\n{col}:\n"
                    technical_report += f"  - Tipo: {df[col].dtype}\n"
                    technical_report += f"  - Valores √∫nicos: {df[col].nunique()}\n"
                    technical_report += f"  - Valores ausentes: {df[col].isnull().sum()}\n"
                    
                    if df[col].dtype in ['int64', 'float64']:
                        technical_report += f"  - M√≠n: {df[col].min()}\n"
                        technical_report += f"  - M√°x: {df[col].max()}\n"
                        technical_report += f"  - M√©dia: {df[col].mean():.2f}\n"
                        technical_report += f"  - Desvio Padr√£o: {df[col].std():.2f}\n"
                
                technical_report += f"""

CORRELA√á√ïES (COLUNAS NUM√âRICAS):
===============================
{df.select_dtypes(include=[np.number]).corr().to_string()}

---
Relat√≥rio t√©cnico gerado pelo DataInsight AI Pro
"""
                
                st.download_button(
                    label="üîß Download Relat√≥rio T√©cnico",
                    data=technical_report,
                    file_name=f"relatorio_tecnico_{timestamp}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
            
            # Configura√ß√µes de exporta√ß√£o
            st.markdown("### ‚öôÔ∏è Configura√ß√µes de Exporta√ß√£o")
            
            include_index = st.checkbox("üìã Incluir √≠ndice nos arquivos")
            date_format = st.selectbox("üìÖ Formato de data:", ["ISO (YYYY-MM-DD)", "BR (DD/MM/YYYY)", "US (MM/DD/YYYY)"])
            decimal_separator = st.selectbox("üî¢ Separador decimal:", ["Ponto (.)", "V√≠rgula (,)"])
            
            st.info("‚öôÔ∏è Configura√ß√µes aplicadas aos pr√≥ximos downloads")
        
        # Estat√≠sticas de exporta√ß√£o
        st.markdown("---")
        st.markdown("### üìä Resumo dos Dados para Exporta√ß√£o")
        
        summary_col1, summary_col2, summary_col3, summary_col4 = st.columns(4)
        
        with summary_col1:
            st.metric("üìã Total de Registros", f"{len(df):,}")
        
        with summary_col2:
            st.metric("üìä Total de Colunas", len(df.columns))
        
        with summary_col3:
            numeric_count = len(df.select_dtypes(include=[np.number]).columns)
            st.metric("üî¢ Colunas Num√©ricas", numeric_count)
        
        with summary_col4:
            categorical_count = len(df.select_dtypes(include=['object']).columns)
            st.metric("üìù Colunas Categ√≥ricas", categorical_count)
        
        st.markdown('</div>', unsafe_allow_html=True)

else:
    # Tela inicial ULTRA MELHORADA
    st.markdown('<div class="fade-in-up">', unsafe_allow_html=True)
    
    # Hero section melhorada
    st.markdown("""
    <div style="text-align: center; padding: 3rem 1rem;">
        <div style="font-size: 4rem; margin-bottom: 1rem;" class="pulse">üöÄ</div>
        <h2 style="color: #667eea; margin-bottom: 2rem;">Bem-vindo ao DataInsight AI Pro!</h2>
        <p style="font-size: 1.2rem; color: #666; max-width: 800px; margin: 0 auto 2rem auto;">
            A plataforma mais avan√ßada para an√°lise de dados com intelig√™ncia artificial. 
            Transforme seus dados em insights poderosos com visualiza√ß√µes interativas e an√°lise de IA de √∫ltima gera√ß√£o.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Grid de funcionalidades melhorado
    st.markdown("### üåü Funcionalidades Principais")
    
    feature_col1, feature_col2, feature_col3 = st.columns(3)
    
    with feature_col1:
        st.markdown("""
        <div class="status-card">
            <h3>üìä An√°lise Avan√ßada</h3>
            <ul>
                <li>‚úÖ Estat√≠sticas autom√°ticas</li>
                <li>‚úÖ Detec√ß√£o de padr√µes</li>
                <li>‚úÖ Qualidade dos dados</li>
                <li>‚úÖ Correla√ß√µes visuais</li>
                <li>‚úÖ KPIs inteligentes</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with feature_col2:
        st.markdown("""
        <div class="status-card">
            <h3>üìà Visualiza√ß√µes Pro</h3>
            <ul>
                <li>‚úÖ 8 tipos de gr√°ficos</li>
                <li>‚úÖ Interatividade total</li>
                <li>‚úÖ Design responsivo</li>
                <li>‚úÖ Exporta√ß√£o HD</li>
                <li>‚úÖ Anima√ß√µes suaves</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with feature_col3:
        st.markdown("""
        <div class="status-card">
            <h3>ü§ñ IA Avan√ßada</h3>
            <ul>
                <li>‚úÖ Google Gemini AI</li>
                <li>‚úÖ Consultas personalizadas</li>
                <li>‚úÖ Insights estrat√©gicos</li>
                <li>‚úÖ Recomenda√ß√µes pr√°ticas</li>
                <li>‚úÖ An√°lise em tempo real</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Se√ß√£o de como come√ßar
    st.markdown("---")
    st.markdown("### üéØ Como Come√ßar")
    
    step_col1, step_col2, step_col3, step_col4 = st.columns(4)
    
    with step_col1:
        st.markdown("""
        **1Ô∏è‚É£ Carregue Dados**
        - üìÅ Upload CSV/Excel/JSON
        - üé≤ Use dados de exemplo
        - üìè At√© 200MB suportado
        """)
    
    with step_col2:
        st.markdown("""
        **2Ô∏è‚É£ Explore Dashboard**
        - üìä M√©tricas autom√°ticas
        - üîç Qualidade dos dados
        - üìà KPIs principais
        """)
    
    with step_col3:
        st.markdown("""
        **3Ô∏è‚É£ Visualize**
        - üé® Gr√°ficos interativos
        - üìä M√∫ltiplas perspectivas
        - üí´ Correla√ß√µes visuais
        """)
    
    with step_col4:
        st.markdown("""
        **4Ô∏è‚É£ Use IA**
        - ü§ñ Configure Gemini API
        - üí¨ Fa√ßa perguntas
        - üéØ Obtenha insights
        """)
    
    # Bot√£o de a√ß√£o principal
    st.markdown("---")
    
    action_col1, action_col2, action_col3 = st.columns([1, 2, 1])
    with action_col2:
        if st.button("üé≤ Come√ßar com Dados de Exemplo", type="primary", use_container_width=True):
            with st.spinner("üîÑ Gerando dataset avan√ßado..."):
                st.session_state.df = generate_sample_data()
                st.session_state.data_loaded = True
                st.session_state.charts_generated = False
                st.success("‚úÖ Dataset carregado! Explore as funcionalidades.")
                time.sleep(1)
                st.rerun()
        
        st.markdown("<div style='text-align: center; margin: 1rem 0;'><strong>ou</strong></div>", unsafe_allow_html=True)
        st.info("üìÅ Use a barra lateral para carregar seus pr√≥prios dados")
    
    # Se√ß√£o de demonstra√ß√£o
    st.markdown("---")
    st.markdown("### üé¨ Demonstra√ß√£o")
    
    demo_col1, demo_col2 = st.columns(2)
    
    with demo_col1:
        st.markdown("""
        **üìä Exemplo de An√°lise:**
        - Dataset com 300 registros de vendas
        - 15+ colunas de dados
        - M√∫ltiplas categorias e regi√µes
        - Dados correlacionados realistas
        """)
    
    with demo_col2:
        st.markdown("""
        **üéØ Insights Dispon√≠veis:**
        - Performance por regi√£o
        - An√°lise de produtos
        - Satisfa√ß√£o do cliente
        - Tend√™ncias temporais
        """)
    
    # Footer informativo
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 15px; margin: 2rem 0;">
        <h4>üöÄ DataInsight AI Pro - Vers√£o 2.0</h4>
        <p>Desenvolvido com Streamlit, Plotly, Pandas e Google Gemini AI</p>
        <p><strong>Recursos:</strong> An√°lise Avan√ßada ‚Ä¢ Visualiza√ß√µes Interativas ‚Ä¢ IA Integrada ‚Ä¢ Exporta√ß√£o Completa</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
