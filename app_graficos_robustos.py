import streamlit as st
import pandas as pd
import numpy as np
import time
import warnings
warnings.filterwarnings('ignore')

# Tentar importar bibliotecas de gr√°ficos (com fallbacks)
PLOTLY_AVAILABLE = False
MATPLOTLIB_AVAILABLE = False
SEABORN_AVAILABLE = False

try:
    import plotly.express as px
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    PLOTLY_AVAILABLE = True
    print("‚úÖ Plotly carregado com sucesso")
except ImportError:
    print("‚ö†Ô∏è Plotly n√£o dispon√≠vel")

try:
    import matplotlib.pyplot as plt
    import matplotlib
    matplotlib.use('Agg')  # Backend n√£o-interativo
    MATPLOTLIB_AVAILABLE = True
    print("‚úÖ Matplotlib carregado com sucesso")
except ImportError:
    print("‚ö†Ô∏è Matplotlib n√£o dispon√≠vel")

try:
    import seaborn as sns
    SEABORN_AVAILABLE = True
    print("‚úÖ Seaborn carregado com sucesso")
except ImportError:
    print("‚ö†Ô∏è Seaborn n√£o dispon√≠vel")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="DataInsight AI Pro - Gr√°ficos Robustos",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Avan√ßado
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    .main {
        font-family: 'Inter', sans-serif;
    }
    
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .hero-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
    }
    
    .metric-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 10px 25px rgba(240, 147, 251, 0.3);
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(240, 147, 251, 0.4);
    }
    
    .metric-number {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0.5rem 0;
    }
    
    .metric-label {
        font-size: 1rem;
        font-weight: 500;
        opacity: 0.9;
    }
    
    .chart-container {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 10px 25px rgba(0,0,0,0.08);
    }
    
    .success-alert {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        color: #155724;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .error-alert {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        color: #721c24;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #dc3545;
        margin: 1rem 0;
    }
    
    .info-alert {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        color: #0c5460;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #17a2b8;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
<div class="hero-header">
    <h1 style="font-size: 3.5rem; font-weight: 700; margin-bottom: 1rem;">
        üöÄ DataInsight AI Pro
    </h1>
    <h3 style="font-size: 1.5rem; font-weight: 400; margin-bottom: 1rem;">
        An√°lise Avan√ßada com Gr√°ficos Garantidos
    </h3>
    <p style="font-size: 1.1rem; opacity: 0.8;">
        Sistema robusto com m√∫ltiplas bibliotecas de visualiza√ß√£o
    </p>
</div>
""", unsafe_allow_html=True)

# Inicializar session state
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
if 'df' not in st.session_state:
    st.session_state.df = None
if 'charts_generated' not in st.session_state:
    st.session_state.charts_generated = False

# Fun√ß√£o para gerar dados de exemplo AVAN√áADA
@st.cache_data
def generate_advanced_sample_data():
    """Gera dados de exemplo mais realistas e complexos"""
    np.random.seed(42)
    n_records = 500
    
    # Dados mais realistas
    vendedores = [
        'Jo√£o Silva', 'Maria Santos', 'Pedro Costa', 'Ana Lima', 'Carlos Rocha',
        'Lucia Ferreira', 'Roberto Alves', 'Fernanda Dias', 'Marcos Oliveira',
        'Patricia Souza', 'Ricardo Mendes', 'Juliana Castro', 'Gabriel Torres',
        'Camila Ribeiro', 'Diego Martins', 'Beatriz Gomes', 'Leonardo Pereira',
        'Isabela Cardoso', 'Thiago Barbosa', 'Natalia Ramos'
    ]
    
    produtos = [
        'iPhone 15 Pro Max', 'MacBook Pro M3', 'iPad Air', 'Apple Watch Ultra 2',
        'Samsung Galaxy S24 Ultra', 'Dell XPS 15', 'Surface Pro 10', 'PlayStation 5',
        'Xbox Series X', 'Nintendo Switch OLED', 'AirPods Pro 2', 'Sony WH-1000XM5',
        'Canon EOS R6 Mark II', 'GoPro Hero 12', 'Tesla Model 3', 'Drone DJI Air 3',
        'Monitor LG 4K', 'Teclado Mec√¢nico', 'Mouse Gamer', 'Webcam 4K'
    ]
    
    regioes = ['Norte', 'Sul', 'Leste', 'Oeste', 'Centro', 'Nordeste']
    meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    categorias = ['Eletr√¥nicos', 'Inform√°tica', 'Games', 'Acess√≥rios', 'Automotivo', 'Casa']
    canais = ['Online', 'Loja F√≠sica', 'Marketplace', 'App Mobile', 'Telefone', 'WhatsApp']
    
    data = []
    for i in range(n_records):
        categoria = np.random.choice(categorias)
        
        # Vendas baseadas na categoria com distribui√ß√£o mais realista
        if categoria == 'Eletr√¥nicos':
            vendas_base = np.random.lognormal(10.5, 0.8)  # Distribui√ß√£o log-normal
        elif categoria == 'Inform√°tica':
            vendas_base = np.random.lognormal(10.2, 0.7)
        elif categoria == 'Games':
            vendas_base = np.random.lognormal(9.8, 0.6)
        elif categoria == 'Automotivo':
            vendas_base = np.random.lognormal(11.2, 1.0)
        elif categoria == 'Casa':
            vendas_base = np.random.lognormal(9.5, 0.5)
        else:  # Acess√≥rios
            vendas_base = np.random.lognormal(8.8, 0.4)
        
        vendas = max(1000, int(vendas_base))
        custo = int(vendas * np.random.uniform(0.30, 0.70))
        lucro = vendas - custo
        margem = (lucro / vendas) * 100
        
        # Satisfa√ß√£o correlacionada com margem e categoria
        if margem > 50:
            satisfacao = np.random.choice([4, 5], p=[0.2, 0.8])
        elif margem > 35:
            satisfacao = np.random.choice([3, 4, 5], p=[0.1, 0.3, 0.6])
        elif margem > 20:
            satisfacao = np.random.choice([2, 3, 4], p=[0.2, 0.5, 0.3])
        else:
            satisfacao = np.random.choice([1, 2, 3], p=[0.4, 0.4, 0.2])
        
        # Quantidade baseada no pre√ßo
        if vendas > 80000:
            quantidade = np.random.randint(1, 3)
        elif vendas > 30000:
            quantidade = np.random.randint(1, 8)
        elif vendas > 10000:
            quantidade = np.random.randint(1, 20)
        else:
            quantidade = np.random.randint(1, 100)
        
        # Adicionar sazonalidade
        mes = np.random.choice(meses)
        if mes in ['Nov', 'Dez']:  # Black Friday e Natal
            vendas = int(vendas * np.random.uniform(1.2, 1.8))
        elif mes in ['Jan', 'Fev']:  # In√≠cio do ano
            vendas = int(vendas * np.random.uniform(0.7, 0.9))
        
        data.append({
            'id': i + 1,
            'vendas': vendas,
            'custo': custo,
            'lucro': lucro,
            'margem': round(margem, 2),
            'regiao': np.random.choice(regioes),
            'produto': np.random.choice(produtos),
            'categoria': categoria,
            'mes': mes,
            'vendedor': np.random.choice(vendedores),
            'canal': np.random.choice(canais),
            'satisfacao': satisfacao,
            'quantidade': quantidade,
            'desconto': round(np.random.uniform(0, 0.40), 3),
            'tempo_entrega': np.random.randint(1, 30),
            'avaliacao': round(np.random.uniform(1, 5), 1),
            'idade_cliente': np.random.randint(18, 75),
            'genero': np.random.choice(['M', 'F'], p=[0.52, 0.48]),
            'cidade': np.random.choice(['S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Bras√≠lia', 'Fortaleza', 'Manaus', 'Curitiba', 'Recife', 'Porto Alegre']),
            'forma_pagamento': np.random.choice(['Cart√£o Cr√©dito', 'Cart√£o D√©bito', 'PIX', 'Boleto', 'Dinheiro'], p=[0.4, 0.2, 0.25, 0.1, 0.05])
        })
    
    df = pd.DataFrame(data)
    
    # Adicionar colunas calculadas
    df['ticket_medio'] = df['vendas'] / df['quantidade']
    df['roi'] = (df['lucro'] / df['custo']) * 100
    df['score_cliente'] = (df['satisfacao'] * 0.4 + df['avaliacao'] * 0.6).round(1)
    df['vendas_por_dia'] = df['vendas'] / df['tempo_entrega']
    df['eficiencia'] = (df['vendas'] / (df['tempo_entrega'] + 1)).round(2)
    
    return df

# Fun√ß√£o ROBUSTA para criar gr√°ficos com m√∫ltiplos fallbacks
def create_robust_charts(df):
    """Cria gr√°ficos usando m√∫ltiplas bibliotecas com fallbacks"""
    charts_created = 0
    total_charts = 8
    
    st.info("üé® Iniciando gera√ß√£o de gr√°ficos robustos...")
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # 1. Gr√°fico de Barras - Vendas por Regi√£o
        status_text.text("üìä Criando gr√°fico de vendas por regi√£o...")
        progress_bar.progress(10)
        
        if 'vendas' in df.columns and 'regiao' in df.columns:
            vendas_regiao = df.groupby('regiao').agg({
                'vendas': 'sum',
                'lucro': 'sum',
                'quantidade': 'sum'
            }).reset_index()
            
            chart_created = False
            
            # Tentar Plotly primeiro
            if PLOTLY_AVAILABLE and not chart_created:
                try:
                    fig1 = px.bar(
                        vendas_regiao,
                        x='regiao',
                        y='vendas',
                        color='lucro',
                        title='üìä Vendas e Lucro por Regi√£o',
                        text='vendas',
                        color_continuous_scale='Viridis',
                        hover_data=['lucro', 'quantidade']
                    )
                    
                    fig1.update_traces(
                        texttemplate='R$ %{text:,.0f}',
                        textposition='outside'
                    )
                    
                    fig1.update_layout(
                        height=500,
                        title_x=0.5,
                        title_font_size=20,
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)'
                    )
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(fig1, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 1/8 criado com Plotly")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Plotly falhou: {str(e)}")
            
            # Fallback para Matplotlib
            if MATPLOTLIB_AVAILABLE and not chart_created:
                try:
                    fig, ax = plt.subplots(figsize=(12, 6))
                    bars = ax.bar(vendas_regiao['regiao'], vendas_regiao['vendas'], 
                                 color=['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe'])
                    
                    ax.set_title('üìä Vendas por Regi√£o', fontsize=16, fontweight='bold')
                    ax.set_xlabel('Regi√£o', fontsize=12)
                    ax.set_ylabel('Vendas (R$)', fontsize=12)
                    
                    # Adicionar valores nas barras
                    for bar in bars:
                        height = bar.get_height()
                        ax.text(bar.get_x() + bar.get_width()/2., height,
                               f'R$ {height:,.0f}', ha='center', va='bottom')
                    
                    plt.xticks(rotation=45)
                    plt.tight_layout()
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.pyplot(fig)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    plt.close()
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 1/8 criado com Matplotlib")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Matplotlib falhou: {str(e)}")
            
            # Fallback para gr√°fico nativo do Streamlit
            if not chart_created:
                try:
                    st.subheader("üìä Vendas por Regi√£o")
                    vendas_regiao_chart = vendas_regiao.set_index('regiao')['vendas']
                    st.bar_chart(vendas_regiao_chart)
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 1/8 criado com Streamlit nativo")
                except Exception as e:
                    st.error(f"‚ùå Todos os m√©todos falharam para gr√°fico 1: {str(e)}")
        
        progress_bar.progress(25)
        
        # 2. Gr√°fico de Pizza - Distribui√ß√£o por Categoria
        status_text.text("ü•ß Criando gr√°fico de distribui√ß√£o por categoria...")
        
        if 'categoria' in df.columns and 'vendas' in df.columns:
            categoria_vendas = df.groupby('categoria')['vendas'].sum().reset_index()
            
            chart_created = False
            
            # Tentar Plotly primeiro
            if PLOTLY_AVAILABLE and not chart_created:
                try:
                    fig2 = px.pie(
                        categoria_vendas,
                        values='vendas',
                        names='categoria',
                        title='ü•ß Distribui√ß√£o de Vendas por Categoria',
                        color_discrete_sequence=px.colors.qualitative.Set3,
                        hole=0.4
                    )
                    
                    fig2.update_traces(
                        textposition='inside',
                        textinfo='percent+label',
                        hovertemplate='<b>%{label}</b><br>Vendas: R$ %{value:,.0f}<br>Percentual: %{percent}<extra></extra>'
                    )
                    
                    fig2.update_layout(
                        height=500,
                        title_x=0.5,
                        title_font_size=20,
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)'
                    )
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(fig2, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 2/8 criado com Plotly")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Plotly falhou: {str(e)}")
            
            # Fallback para Matplotlib
            if MATPLOTLIB_AVAILABLE and not chart_created:
                try:
                    fig, ax = plt.subplots(figsize=(10, 8))
                    colors = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe']
                    wedges, texts, autotexts = ax.pie(categoria_vendas['vendas'], 
                                                     labels=categoria_vendas['categoria'],
                                                     autopct='%1.1f%%',
                                                     colors=colors[:len(categoria_vendas)],
                                                     startangle=90)
                    
                    ax.set_title('ü•ß Distribui√ß√£o de Vendas por Categoria', fontsize=16, fontweight='bold')
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.pyplot(fig)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    plt.close()
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 2/8 criado com Matplotlib")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Matplotlib falhou: {str(e)}")
            
            if not chart_created:
                st.error("‚ùå N√£o foi poss√≠vel criar gr√°fico de pizza")
        
        progress_bar.progress(40)
        
        # 3. Gr√°fico de Linha - Tend√™ncia Temporal
        status_text.text("üìà Criando gr√°fico de tend√™ncia temporal...")
        
        if 'vendas' in df.columns and 'mes' in df.columns:
            meses_ordem = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
            
            vendas_mes = df.groupby('mes').agg({
                'vendas': 'sum',
                'lucro': 'sum',
                'quantidade': 'sum'
            }).reindex(meses_ordem, fill_value=0).reset_index()
            vendas_mes.columns = ['mes', 'vendas', 'lucro', 'quantidade']
            
            chart_created = False
            
            # Tentar Plotly primeiro
            if PLOTLY_AVAILABLE and not chart_created:
                try:
                    fig3 = go.Figure()
                    
                    fig3.add_trace(go.Scatter(
                        x=vendas_mes['mes'],
                        y=vendas_mes['vendas'],
                        mode='lines+markers',
                        name='Vendas',
                        line=dict(color='#667eea', width=4),
                        marker=dict(size=10, symbol='circle'),
                        hovertemplate='<b>Vendas</b><br>M√™s: %{x}<br>Valor: R$ %{y:,.0f}<extra></extra>'
                    ))
                    
                    fig3.add_trace(go.Scatter(
                        x=vendas_mes['mes'],
                        y=vendas_mes['lucro'],
                        mode='lines+markers',
                        name='Lucro',
                        line=dict(color='#f093fb', width=4),
                        marker=dict(size=10, symbol='diamond'),
                        yaxis='y2',
                        hovertemplate='<b>Lucro</b><br>M√™s: %{x}<br>Valor: R$ %{y:,.0f}<extra></extra>'
                    ))
                    
                    fig3.update_layout(
                        title='üìà Tend√™ncia de Vendas e Lucro por M√™s',
                        xaxis_title='M√™s',
                        yaxis_title='Vendas (R$)',
                        yaxis2=dict(title='Lucro (R$)', overlaying='y', side='right'),
                        height=500,
                        title_x=0.5,
                        title_font_size=20,
                        hovermode='x unified',
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)',
                        legend=dict(x=0.02, y=0.98)
                    )
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(fig3, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 3/8 criado com Plotly")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Plotly falhou: {str(e)}")
            
            # Fallback para Matplotlib
            if MATPLOTLIB_AVAILABLE and not chart_created:
                try:
                    fig, ax1 = plt.subplots(figsize=(12, 6))
                    
                    color = '#667eea'
                    ax1.set_xlabel('M√™s')
                    ax1.set_ylabel('Vendas (R$)', color=color)
                    line1 = ax1.plot(vendas_mes['mes'], vendas_mes['vendas'], 
                                    color=color, marker='o', linewidth=3, markersize=8, label='Vendas')
                    ax1.tick_params(axis='y', labelcolor=color)
                    
                    ax2 = ax1.twinx()
                    color = '#f093fb'
                    ax2.set_ylabel('Lucro (R$)', color=color)
                    line2 = ax2.plot(vendas_mes['mes'], vendas_mes['lucro'], 
                                    color=color, marker='s', linewidth=3, markersize=8, label='Lucro')
                    ax2.tick_params(axis='y', labelcolor=color)
                    
                    ax1.set_title('üìà Tend√™ncia de Vendas e Lucro por M√™s', fontsize=16, fontweight='bold')
                    
                    # Adicionar legenda
                    lines1, labels1 = ax1.get_legend_handles_labels()
                    lines2, labels2 = ax2.get_legend_handles_labels()
                    ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
                    
                    plt.xticks(rotation=45)
                    plt.tight_layout()
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.pyplot(fig)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    plt.close()
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 3/8 criado com Matplotlib")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Matplotlib falhou: {str(e)}")
            
            # Fallback para gr√°fico nativo do Streamlit
            if not chart_created:
                try:
                    st.subheader("üìà Tend√™ncia de Vendas por M√™s")
                    vendas_mes_chart = vendas_mes.set_index('mes')['vendas']
                    st.line_chart(vendas_mes_chart)
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 3/8 criado com Streamlit nativo")
                except Exception as e:
                    st.error(f"‚ùå Todos os m√©todos falharam para gr√°fico 3: {str(e)}")
        
        progress_bar.progress(55)
        
        # 4. Scatter Plot - Vendas vs Satisfa√ß√£o
        status_text.text("üí´ Criando scatter plot...")
        
        if 'vendas' in df.columns and 'satisfacao' in df.columns:
            chart_created = False
            
            # Tentar Plotly primeiro
            if PLOTLY_AVAILABLE and not chart_created:
                try:
                    fig4 = px.scatter(
                        df,
                        x='satisfacao',
                        y='vendas',
                        color='regiao',
                        size='lucro',
                        title='üí´ Rela√ß√£o: Vendas √ó Satisfa√ß√£o √ó Regi√£o',
                        hover_data=['produto', 'categoria', 'margem'],
                        color_discrete_sequence=px.colors.qualitative.Bold,
                        size_max=30
                    )
                    
                    fig4.update_traces(
                        marker=dict(line=dict(width=1, color='white'))
                    )
                    
                    fig4.update_layout(
                        height=500,
                        title_x=0.5,
                        title_font_size=20,
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)',
                        xaxis=dict(title='Satisfa√ß√£o (1-5)'),
                        yaxis=dict(title='Vendas (R$)')
                    )
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(fig4, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 4/8 criado com Plotly")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Plotly falhou: {str(e)}")
            
            # Fallback para Matplotlib
            if MATPLOTLIB_AVAILABLE and not chart_created:
                try:
                    fig, ax = plt.subplots(figsize=(12, 8))
                    
                    # Criar scatter plot com cores por regi√£o
                    regioes_unicas = df['regiao'].unique()
                    colors = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe']
                    
                    for i, regiao in enumerate(regioes_unicas):
                        df_regiao = df[df['regiao'] == regiao]
                        ax.scatter(df_regiao['satisfacao'], df_regiao['vendas'], 
                                  c=colors[i % len(colors)], label=regiao, alpha=0.7, s=60)
                    
                    ax.set_xlabel('Satisfa√ß√£o (1-5)', fontsize=12)
                    ax.set_ylabel('Vendas (R$)', fontsize=12)
                    ax.set_title('üí´ Rela√ß√£o: Vendas √ó Satisfa√ß√£o √ó Regi√£o', fontsize=16, fontweight='bold')
                    ax.legend()
                    ax.grid(True, alpha=0.3)
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.pyplot(fig)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    plt.close()
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 4/8 criado com Matplotlib")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Matplotlib falhou: {str(e)}")
            
            if not chart_created:
                st.error("‚ùå N√£o foi poss√≠vel criar scatter plot")
        
        progress_bar.progress(70)
        
        # 5. Histograma - Distribui√ß√£o de Vendas
        status_text.text("üìä Criando histograma...")
        
        if 'vendas' in df.columns:
            chart_created = False
            
            # Tentar Plotly primeiro
            if PLOTLY_AVAILABLE and not chart_created:
                try:
                    fig5 = px.histogram(
                        df,
                        x='vendas',
                        nbins=25,
                        title='üìä Distribui√ß√£o de Vendas',
                        color_discrete_sequence=['#4facfe'],
                        marginal='box'
                    )
                    
                    fig5.update_traces(
                        marker=dict(line=dict(width=1, color='white'))
                    )
                    
                    fig5.update_layout(
                        height=500,
                        title_x=0.5,
                        title_font_size=20,
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)',
                        xaxis=dict(title='Vendas (R$)'),
                        yaxis=dict(title='Frequ√™ncia')
                    )
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(fig5, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 5/8 criado com Plotly")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Plotly falhou: {str(e)}")
            
            # Fallback para Matplotlib
            if MATPLOTLIB_AVAILABLE and not chart_created:
                try:
                    fig, ax = plt.subplots(figsize=(12, 6))
                    
                    n, bins, patches = ax.hist(df['vendas'], bins=25, color='#4facfe', alpha=0.7, edgecolor='white')
                    
                    ax.set_xlabel('Vendas (R$)', fontsize=12)
                    ax.set_ylabel('Frequ√™ncia', fontsize=12)
                    ax.set_title('üìä Distribui√ß√£o de Vendas', fontsize=16, fontweight='bold')
                    ax.grid(True, alpha=0.3)
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.pyplot(fig)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    plt.close()
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 5/8 criado com Matplotlib")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Matplotlib falhou: {str(e)}")
            
            if not chart_created:
                st.error("‚ùå N√£o foi poss√≠vel criar histograma")
        
        progress_bar.progress(85)
        
        # 6. Top Produtos
        status_text.text("üèÜ Criando ranking de produtos...")
        
        if 'produto' in df.columns and 'vendas' in df.columns:
            top_produtos = df.groupby('produto')['vendas'].sum().nlargest(10).reset_index()
            
            chart_created = False
            
            # Tentar Plotly primeiro
            if PLOTLY_AVAILABLE and not chart_created:
                try:
                    fig6 = px.bar(
                        top_produtos,
                        y='produto',
                        x='vendas',
                        orientation='h',
                        title='üèÜ Top 10 Produtos por Vendas',
                        color='vendas',
                        color_continuous_scale='Viridis'
                    )
                    
                    fig6.update_layout(
                        height=500,
                        title_x=0.5,
                        title_font_size=20,
                        plot_bgcolor='rgba(0,0,0,0)',
                        paper_bgcolor='rgba(0,0,0,0)',
                        yaxis=dict(title='Produto'),
                        xaxis=dict(title='Vendas (R$)')
                    )
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.plotly_chart(fig6, use_container_width=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 6/8 criado com Plotly")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Plotly falhou: {str(e)}")
            
            # Fallback para Matplotlib
            if MATPLOTLIB_AVAILABLE and not chart_created:
                try:
                    fig, ax = plt.subplots(figsize=(12, 8))
                    
                    y_pos = np.arange(len(top_produtos))
                    bars = ax.barh(y_pos, top_produtos['vendas'], color='#667eea')
                    
                    ax.set_yticks(y_pos)
                    ax.set_yticklabels(top_produtos['produto'])
                    ax.set_xlabel('Vendas (R$)', fontsize=12)
                    ax.set_title('üèÜ Top 10 Produtos por Vendas', fontsize=16, fontweight='bold')
                    
                    # Adicionar valores nas barras
                    for i, bar in enumerate(bars):
                        width = bar.get_width()
                        ax.text(width, bar.get_y() + bar.get_height()/2,
                               f'R$ {width:,.0f}', ha='left', va='center')
                    
                    plt.tight_layout()
                    
                    st.markdown('<div class="chart-container">', unsafe_allow_html=True)
                    st.pyplot(fig)
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    plt.close()
                    charts_created += 1
                    chart_created = True
                    st.success("‚úÖ Gr√°fico 6/8 criado com Matplotlib")
                    
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Matplotlib falhou: {str(e)}")
            
            if not chart_created:
                st.error("‚ùå N√£o foi poss√≠vel criar ranking de produtos")
        
        progress_bar.progress(100)
        status_text.text("‚úÖ Gr√°ficos conclu√≠dos!")
        
        time.sleep(1)
        progress_bar.empty()
        status_text.empty()
        
        # Resumo final
        if charts_created > 0:
            st.markdown(f"""
            <div class="success-alert">
                <h3>üéâ Sucesso!</h3>
                <p><strong>{charts_created}</strong> de {total_charts} gr√°ficos criados com sucesso!</p>
                <p>Sistema robusto funcionando perfeitamente.</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="error-alert">
                <h3>‚ùå Erro</h3>
                <p>Nenhum gr√°fico p√¥de ser criado. Verifique as depend√™ncias.</p>
            </div>
            """, unsafe_allow_html=True)
        
        return charts_created > 0
        
    except Exception as e:
        progress_bar.empty()
        status_text.empty()
        st.error(f"‚ùå Erro geral na cria√ß√£o de gr√°ficos: {str(e)}")
        return False

# Sidebar
with st.sidebar:
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; padding: 1.5rem; border-radius: 15px; text-align: center; margin-bottom: 1rem;">
        <h2 style="margin: 0;">üéõÔ∏è Controle Central</h2>
        <p style="margin: 0.5rem 0 0 0; opacity: 0.9;">Sistema Robusto</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Status das bibliotecas
    st.markdown("### üìö Status das Bibliotecas")
    
    if PLOTLY_AVAILABLE:
        st.markdown('<div class="success-alert">‚úÖ Plotly: Dispon√≠vel</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="error-alert">‚ùå Plotly: N√£o dispon√≠vel</div>', unsafe_allow_html=True)
    
    if MATPLOTLIB_AVAILABLE:
        st.markdown('<div class="success-alert">‚úÖ Matplotlib: Dispon√≠vel</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="error-alert">‚ùå Matplotlib: N√£o dispon√≠vel</div>', unsafe_allow_html=True)
    
    if SEABORN_AVAILABLE:
        st.markdown('<div class="success-alert">‚úÖ Seaborn: Dispon√≠vel</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="info-alert">‚ÑπÔ∏è Seaborn: N√£o dispon√≠vel</div>', unsafe_allow_html=True)
    
    st.divider()
    
    # Bot√£o para dados de exemplo
    if st.button("üé≤ Gerar Dataset Avan√ßado", type="primary", use_container_width=True):
        with st.spinner("üîÑ Gerando dataset complexo..."):
            st.session_state.df = generate_advanced_sample_data()
            st.session_state.data_loaded = True
            st.session_state.charts_generated = False
            st.success("‚úÖ Dataset avan√ßado carregado!")
            time.sleep(1)
            st.rerun()
    
    # Upload de arquivo
    uploaded_file = st.file_uploader("üìÅ Upload de Arquivo", type=['csv', 'xlsx', 'json'])
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith('.xlsx'):
                df = pd.read_excel(uploaded_file)
            elif uploaded_file.name.endswith('.json'):
                df = pd.read_json(uploaded_file)
            
            st.session_state.df = df
            st.session_state.data_loaded = True
            st.session_state.charts_generated = False
            st.success(f"‚úÖ {uploaded_file.name} carregado!")
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå Erro: {str(e)}")
    
    st.divider()
    
    # Informa√ß√µes do dataset
    if st.session_state.data_loaded and st.session_state.df is not None:
        df = st.session_state.df
        
        st.markdown("### üìä Info do Dataset")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("üìã Registros", f"{len(df):,}")
            st.metric("üìä Colunas", len(df.columns))
        
        with col2:
            if 'vendas' in df.columns:
                st.metric("üí∞ Vendas", f"R$ {df['vendas'].sum()/1000:.0f}K")
            if 'lucro' in df.columns:
                st.metric("üìà Lucro", f"R$ {df['lucro'].sum()/1000:.0f}K")

# Interface principal
if st.session_state.data_loaded and st.session_state.df is not None:
    df = st.session_state.df
    
    # Tabs
    tab1, tab2, tab3 = st.tabs(["üìä Dashboard", "üìà Gr√°ficos Robustos", "üìã Dados"])
    
    with tab1:
        st.markdown("## üìä Dashboard Executivo")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">üìã Registros</div>
                <div class="metric-number">{len(df):,}</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-label">üìä Colunas</div>
                <div class="metric-number">{len(df.columns)}</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            if 'vendas' in df.columns:
                total_vendas = df['vendas'].sum()
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">üí∞ Vendas</div>
                    <div class="metric-number">R$ {total_vendas/1000000:.1f}M</div>
                </div>
                """, unsafe_allow_html=True)
        
        with col4:
            if 'lucro' in df.columns:
                total_lucro = df['lucro'].sum()
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-label">üìà Lucro</div>
                    <div class="metric-number">R$ {total_lucro/1000000:.1f}M</div>
                </div>
                """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # KPIs adicionais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if 'margem' in df.columns:
                margem_media = df['margem'].mean()
                st.metric("üìä Margem M√©dia", f"{margem_media:.1f}%")
        
        with col2:
            if 'satisfacao' in df.columns:
                satisfacao_media = df['satisfacao'].mean()
                st.metric("‚≠ê Satisfa√ß√£o", f"{satisfacao_media:.1f}/5")
        
        with col3:
            if 'ticket_medio' in df.columns:
                ticket_medio = df['ticket_medio'].mean()
                st.metric("üé´ Ticket M√©dio", f"R$ {ticket_medio:,.0f}")
        
        with col4:
            if 'roi' in df.columns:
                roi_medio = df['roi'].mean()
                st.metric("üìà ROI M√©dio", f"{roi_medio:.1f}%")
    
    with tab2:
        st.markdown("## üìà Gr√°ficos Robustos")
        
        # Bot√£o para gerar gr√°ficos
        if st.button("üé® Gerar Gr√°ficos Robustos", type="primary", use_container_width=True):
            success = create_robust_charts(df)
            st.session_state.charts_generated = success
        
        if not st.session_state.charts_generated:
            st.markdown("""
            ### üéØ Sistema de Gr√°ficos Robustos
            
            Este sistema usa m√∫ltiplas bibliotecas com fallbacks autom√°ticos:
            
            1. **Plotly** (Primeira op√ß√£o) - Gr√°ficos interativos avan√ßados
            2. **Matplotlib** (Fallback) - Gr√°ficos est√°ticos confi√°veis  
            3. **Streamlit nativo** (√öltimo recurso) - Gr√°ficos b√°sicos garantidos
            
            **Garantia:** Pelo menos uma biblioteca funcionar√°!
            """)
    
    with tab3:
        st.markdown("## üìã Explorador de Dados")
        
        # Filtros
        col1, col2 = st.columns(2)
        
        with col1:
            if 'regiao' in df.columns:
                regioes = st.multiselect("üåç Filtrar por regi√£o:", df['regiao'].unique())
                if regioes:
                    df = df[df['regiao'].isin(regioes)]
        
        with col2:
            if 'categoria' in df.columns:
                categorias = st.multiselect("üì¶ Filtrar por categoria:", df['categoria'].unique())
                if categorias:
                    df = df[df['categoria'].isin(categorias)]
        
        # Exibir dados
        st.dataframe(df, use_container_width=True, height=400)
        
        # Estat√≠sticas
        if len(df) > 0:
            st.markdown("### üìä Estat√≠sticas dos Dados Filtrados")
            numeric_cols = df.select_dtypes(include=[np.number]).columns
            if len(numeric_cols) > 0:
                st.dataframe(df[numeric_cols].describe(), use_container_width=True)

else:
    # Tela inicial
    st.markdown("""
    <div style="text-align: center; padding: 3rem 1rem;">
        <div style="font-size: 4rem; margin-bottom: 1rem;">üöÄ</div>
        <h2 style="color: #667eea; margin-bottom: 2rem;">Sistema de Gr√°ficos Ultra Robusto!</h2>
        <p style="font-size: 1.2rem; color: #666; max-width: 800px; margin: 0 auto 2rem auto;">
            Sistema avan√ßado com m√∫ltiplas bibliotecas de visualiza√ß√£o e fallbacks autom√°ticos.
            <strong>Garantia de funcionamento!</strong>
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Funcionalidades
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="info-alert">
            <h3>üé® Gr√°ficos Robustos</h3>
            <ul>
                <li>‚úÖ Plotly interativo</li>
                <li>‚úÖ Matplotlib est√°tico</li>
                <li>‚úÖ Streamlit nativo</li>
                <li>‚úÖ Fallbacks autom√°ticos</li>
                <li>‚úÖ 100% de garantia</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="info-alert">
            <h3>üìä Dataset Avan√ßado</h3>
            <ul>
                <li>‚úÖ 500+ registros</li>
                <li>‚úÖ 20+ colunas</li>
                <li>‚úÖ Dados realistas</li>
                <li>‚úÖ Correla√ß√µes complexas</li>
                <li>‚úÖ Sazonalidade</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="info-alert">
            <h3>üîß Sistema Robusto</h3>
            <ul>
                <li>‚úÖ Detec√ß√£o autom√°tica</li>
                <li>‚úÖ Tratamento de erros</li>
                <li>‚úÖ M√∫ltiplos fallbacks</li>
                <li>‚úÖ Status em tempo real</li>
                <li>‚úÖ Logs detalhados</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.info("üëà Clique em 'Gerar Dataset Avan√ßado' no menu lateral para come√ßar!")

# Footer
st.markdown("---")
st.markdown("üöÄ **DataInsight AI Pro** - Sistema de Gr√°ficos Ultra Robusto com Fallbacks Autom√°ticos")
